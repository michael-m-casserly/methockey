<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html dir="ltr" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta name="ROBOTS" content="INDEX,FOLLOW"/><meta name="DESCRIPTION" content=""/><meta name="KEYWORDS" content=""/>
<title>Metropolitan Collegiate Hockey Conference</title>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<meta content="Home of the Metropolitan Collegiate Hockey Conference (MCHC), located in the metro-NYC area." name="description" />
<link href="MCHC-Base.css" rel="stylesheet" type="text/css" />
<link href="auto-styles.css" rel="stylesheet" type="text/css" />

<!-- Begin Google Analytics Code -->
<script type="text/javascript">
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-45783609-3', 'methockey.com');
  ga('send', 'pageview');

</script>
<!-- End Google Analytics Code -->

</head>

<body>

<!--#include virtual="/banner.html"-->

<!--#include virtual="/left-nav.html"-->

<!--#include virtual="/right-nav.html"-->
		
	<div id="page_content" > 
    	<table cellspacing="5" style="width: 655px" class="auto-style35" >
			<tbody>
            <tr>
            	<td>TEST FILTERED EMBEDDED CALENDAR<br/>
<script language="javascript">
  var calendarId = 'primary';
  var now = getRelativeDate(0,0);
  var then = getRelativeDate(7,0); // A week out

  var events = Calendar.Events.list('9lh231pkuunmglga33vso1cnv8@group.calendar.google.com', {
    timeMin: now.toISOString(),
    timeMax: then.toISOString(),
    q: "Columbia"
  });
 </script>
 <iframe src="https://www.google.com/calendar/embed?showDate=0&amp;showTabs=0&amp;showTitle=0&amp;showCalendars=0&amp;mode=AGENDA&amp;height=300&amp;wkst=1&amp;bgcolor=%23FFFFFF&amp;src=9lh231pkuunmglga33vso1cnv8@group.calendar.google.com&amp;color=%23711616&amp;ctz=America%2FNew_York" style=" border-width:0 " width="500" height="368" frameborder="0" scrolling="no"></iframe>
                </td>
            </tr>
            <tr>
            	<td>    <p>Google Calendar API Quickstart</p>

    <!--Add buttons to initiate auth sequence and sign out-->
    <button id="authorize_button" style="display: none;">Authorize</button>
    <button id="signout_button" style="display: none;">Sign Out</button>

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
      // Client ID and API key from the Developer Console
      var CLIENT_ID = '681934477040-a20soqo26lng2gt5sgc67ereciuusrsd.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyBFDfMVc8WUWgXluMpYr4-OVkUn1EyIbuM';
      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";
      var authorizeButton = document.getElementById('authorize_button');
      var signoutButton = document.getElementById('signout_button');
      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }
      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        }, function(error) {
          appendPre(JSON.stringify(error, null, 2));
        });
      }
      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }
      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }
      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }
      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }
      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function listUpcomingEvents() {
        gapi.client.calendar.events.list({
          'calendarId': '9lh231pkuunmglga33vso1cnv8@group.calendar.google.com',
          'timeMin': (new Date()).toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 15,
          'orderBy': 'startTime',
		  'q': 'Columbia'
        }).then(function(response) {
          var events = response.result.items;
          appendPre('Upcoming events:');
          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              appendPre(event.summary + ' (' + when + ')')
            }
          } else {
            appendPre('No upcoming events found.');
          }
        });
      }
    </script>

    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script></td>
    </tr>
    <!--Test Latest Google Method-->
    <tr>
    <td>TEST GOOGLE EVENTS CODE<br />
    
<script src="https://apis.google.com/js/api.js"></script>
<script>
  /**
   * Sample JavaScript code for calendar.events.list
   * See instructions for running APIs Explorer code samples locally:
   * https://developers.google.com/explorer-help/guides/code_samples#javascript
   */

  function loadClient() {
    gapi.client.setApiKey("AIzaSyAGV--c5Uum4_SsWHjlnVC_JLbt8AAFbt8");
    return gapi.client.load("https://content.googleapis.com/discovery/v1/apis/calendar/v3/rest")
        .then(function() { console.log("GAPI client loaded for API"); },
              function(err) { console.error("Error loading GAPI client for API", err); });
  }
  // Make sure the client is loaded before calling this method.
  function execute() {
    return gapi.client.calendar.events.list({
      "calendarId": "9lh231pkuunmglga33vso1cnv8@group.calendar.google.com",
      "maxResults": 10,
      "q": "Columbia"
    })
        .then(function(response) {
                // Handle the results here (response.result has the parsed body).
                console.log("Response", response);
              },
              function(err) { console.error("Execute error", err); });
  }
  gapi.load("client");
</script>
<button onclick="loadClient()">load</button>
<button onclick="execute()">execute</button>

    
    </td>
    </tr>
			<tr>
				<td style="width: 603px">
				
				</td>
			</tr>
			<tr>
				<td class="PageHeader">
				<!--img src="Pictures/upcoming%20games.jpg" /-->Upcoming MCHC Games</td>
			</tr>
			<tr>
				<td  style="width: 603px;"><center>
                <img src="/Pictures/upcoming-games-header.jpg" border="0" width="637"/><br/><img src="/Pictures/upcoming-games.jpg" border="0" width="637"/></center>
                <!--p>***The January 25th game at World Ice Arena WILL NOT BE OPEN TO SPECTATORS. This ice slot is a converted "practice slot" and the arena will not have the proper staff on hand to accommodate fans/spectators. We apologize for any inconvenience.</p-->
				</td>
			</tr>
			<!--tr>
            	<td align="center"><h1>2018 MCHC Champions - Fordham Rams</h1><img src="http://www.fordhamramshockey.com/images/team/2018FordhamHockeyTeamPictureChampionshipGame_home.jpg" border="0" alt="2018 Fordham Hockey Team Picture MCHC Championship Game" title="2018 Fordham Hockey Team Picture MCHC Championship Game" /></td>
            </tr-->
            <tr><td style="width: 635px;"><br/><!--#include virtual="/standings/standings-include.html"--></td></tr>
            <tr>
				<td class="PageHeader"><br/>2018-19 ACHA Men's Division 3<br/>Ranking #9<br/>(January 31, 2019)<br/><img src="/Pictures/acha-standings.png" alt="ACHA Standings" title="ACHA Standings" /><br/><br/></td>
			</tr>
            <tr>
				<td class="auto-style15" align="center" style="width: 603px;"><br/><span style="font-weight:bold;">MCHC Executive Board</span><br/>
President: <a href="mailto:fordhamhockey@gmail.com">Andrew Mola</a>, 917-743-4429<br/>
Eligibility: <a href="mailto:wducey@sunymaritime.edu">Bill Ducey</a><br/>
Structures: <a href="mailto:garytsteele@optonline.net">Gary Steele</a><br/>
Rules: <a href="mailto:gerard103@aol.com">Gerry Donnelly</a><br/>
Conference Administrator: <a href="mailto:webmaster@methockey.com">Michael Casserly</a><br/><br/></td>
            </tr>
            <tr>
				<td class="auto-style15" align="center" style="width: 603px;"><br/>Referee in Chief: <a href="mailto:gerard103@aol.com">Gerry Donnelly</a>, 516-885-4432<br/>
Assigner: <a href="mailto:zebraxbar@yahoo.com">Mark Wonicki</a><br/><br/></td>
            </tr>

			</tbody>
		
        </table>
	
    </div>
    
		
<!--#include virtual="/footer.html"-->

</body>

</html>